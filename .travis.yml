language: csharp
mono: none
dotnet: 3.1.401
addons:
    apt:
        packages:
            - powershell
            - protobuf-compiler
            - fpc
os: linux
dist: xenial

before_install:
    - if [ "$TRAVIS_OS_NAME" = "windows" ]; then choco install dotnetcore-sdk; fi

before_script:
    - if [ "$TRAVIS_OS_NAME" = "osx" ]; then brew cask install powershell; fi
    - if [ "$TRAVIS_OS_NAME" = "osx" ]; then brew install fpc; fi
    - if [ "$TRAVIS_OS_NAME" = "osx" ]; then brew install --force protobuf; fi
    - if [ "$TRAVIS_OS_NAME" = "windows" ]; then choco install pwsh; fi
    - if [ "$TRAVIS_OS_NAME" = "windows" ]; then choco install freepascal; fi
    - if [ "$TRAVIS_OS_NAME" = "windows" ]; then choco install protoc; fi
    # Path refresh command based on https://travis-ci.community/t/windows-builds-refreshenv-command-not-found/5803/5
    - if [ "$TRAVIS_OS_NAME" = "windows" ]; then eval $(powershell -NonInteractive -Command 'write("export PATH=`"" + ([Environment]::GetEnvironmentVariable("PATH","Machine") + ";" + [Environment]::GetEnvironmentVariable("PATH","User")).replace("\","/").replace("C:","/c").replace(";",":") + ":`$PATH`"")'); fi

stages:
    - name: analyze
      if: type != pull_request
    - name: publish
      if: type != pull_request
    - name: test pull request
      if: type = pull_request

jobs:
    include:
        -   stage: analyze
            name: Test on Linux
            os: linux
            script:
                - pwsh -Command "./script/travis-ci-test.ps1 -StableKey build-${TRAVIS_BUILD_NUMBER}-${TRAVIS_OS_NAME}-stable -Bucket (ConvertTo-SecureString -AsPlainText -Force -String ${THISDB_BUCKET}) -ApiKey (ConvertTo-SecureString -AsPlainText -Force -String ${THISDB_API_KEY})"
        -   os: osx
            name: Test on macOS
            script:
                - pwsh -Command "./script/travis-ci-test.ps1 -StableKey build-${TRAVIS_BUILD_NUMBER}-${TRAVIS_OS_NAME}-stable -Bucket (ConvertTo-SecureString -AsPlainText -Force -String ${THISDB_BUCKET}) -ApiKey (ConvertTo-SecureString -AsPlainText -Force -String ${THISDB_API_KEY})"
        -   stage: publish
            name: Check test results on Linux
            os: linux
            script:
                - pwsh -Command "./script/travis-ci-check-stable.ps1 -StableKey build-${TRAVIS_BUILD_NUMBER}-${TRAVIS_OS_NAME}-stable -Bucket (ConvertTo-SecureString -AsPlainText -Force -String ${THISDB_BUCKET}) -ApiKey (ConvertTo-SecureString -AsPlainText -Force -String ${THISDB_API_KEY})"
        -   name: Check test results on macOS
            os: osx
            script:
                - pwsh -Command "./script/travis-ci-check-stable.ps1 -StableKey build-${TRAVIS_BUILD_NUMBER}-${TRAVIS_OS_NAME}-stable -Bucket (ConvertTo-SecureString -AsPlainText -Force -String ${THISDB_BUCKET}) -ApiKey (ConvertTo-SecureString -AsPlainText -Force -String ${THISDB_API_KEY})"
        -   name: Deploy
            script:
                - pwsh -Command "./script/travis-ci-deploy.ps1 -StableKey build-${TRAVIS_BUILD_NUMBER}-${TRAVIS_OS_NAME}-stable -Bucket (ConvertTo-SecureString -AsPlainText -Force -String ${THISDB_BUCKET}) -ThisDbApiKey (ConvertTo-SecureString -AsPlainText -Force -String ${THISDB_API_KEY}) -NuGetOrgApiKey (ConvertTo-SecureString -AsPlainText -Force -String ${NUGET_ORG_API_KEY})"
        -   stage: test pull request
            name: Test pull request on Linux
            os: linux
            script:
                - pwsh -Command "./script/travis-ci-test-pull-request.ps1"
        -   name: Test pull request os macOS
            os: osx
            script:
                - pwsh -Command "./script/travis-ci-test-pull-request.ps1"

<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>netcoreapp3.1</TargetFramework>
    <RootNamespace>Work.Connor.Protobuf.Delphi.ProtocGenDelphi.Tests</RootNamespace>
    <IsPackable>false</IsPackable>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Google.Protobuf.Tools" Version="3.13.0" />
    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="16.5.0" />
    <PackageReference Include="xunit" Version="2.4.1" />
    <PackageReference Include="xunit.runner.visualstudio" Version="2.4.1" />
    <PackageReference Include="coverlet.collector" Version="1.2.0" />
    <PackageReference Include="SonarAnalyzer.CSharp" Version="8.12.0.21095">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\protoc-gen-delphi\protoc-gen-delphi.csproj" />
  </ItemGroup>

  <!-- Include published version of tested project for integration tests -->
  <!-- Solution based on https://github.com/dotnet/sdk/issues/1675#issuecomment-675590262 -->
  <PropertyGroup>
    <TestedExeSubDirectory>exe-protoc-gen-delphi</TestedExeSubDirectory>
    <LocalRuntimeIdentifier Condition="$([MSBuild]::IsOSPlatform('Linux'))">linux-x64</LocalRuntimeIdentifier>
    <LocalRuntimeIdentifier Condition="$([MSBuild]::IsOSPlatform('OSX'))">osx-x64</LocalRuntimeIdentifier>
    <LocalRuntimeIdentifier Condition="$([MSBuild]::IsOSPlatform('Windows'))">win-x64</LocalRuntimeIdentifier>
  </PropertyGroup>
  <Target Name="AddExeDependencyForBuild" BeforeTargets="CopyFilesToOutputDirectory">
    <MSBuild Projects="..\protoc-gen-delphi\protoc-gen-delphi.csproj"
             Targets="Publish"
             Properties="PublishDir=$([System.IO.Path]::GetFullPath($(OutDir)))/$(TestedExeSubDirectory);PublishReadyToRun=false;RuntimeIdentifier=$(LocalRuntimeIdentifier)"
             BuildInParallel="$(BuildInParallel)" />
  </Target>

  <Target Name="CopyProtobufTools" AfterTargets="Build">
    <ItemGroup>
      <ProtobufTools Include="$(PkgGoogle_Protobuf_Tools)/tools/**/*.*" />
    </ItemGroup>
    <Copy SourceFiles="@(ProtobufTools)" DestinationFolder="$(TargetDir)/Google.Protobuf.Tools/tools/%(RecursiveDir)" SkipUnchangedFiles="true" />
  </Target>

  <ItemGroup>
    <!-- Runtime-independent support code for generated files -->
    <EmbeddedResource Include="../runtime/Work/Connor/Protobuf/Delphi/ProtocGenDelphi/*.pas"
                      LogicalName="[support code unit]%(Filename)%(Extension)"
                      Link="Support Code/%(Filename)%(Extension)" />
    <!-- Source code of stub runtime library implementation -->
    <EmbeddedResource Include="../runtime/Work/Connor/Protobuf/Delphi/ProtocGenDelphi/StubRuntime/*.pas"
                      LogicalName="[stub runtime unit]%(Filename)%(Extension)"
                      Link="Stub Runtime/%(Filename)%(Extension)" />
  </ItemGroup>

  <ItemGroup>
    <!-- Known schema folders -->
    <EmbeddedResource Include="../test-vectors/known-schemata/**/*.protoc-input/**/*"
                      LogicalName="[known schema folder]%(RecursiveDir)%(Filename)%(Extension)"
                      Link="Known Schemata/%(RecursiveDir)%(Filename)%(Extension)" />
    <!-- Known schema files -->
    <EmbeddedResource Include="../test-vectors/known-schemata/**/*.proto"
                      Exclude="../test-vectors/known-schemata/**/*.protoc-input/**/*"
                      LogicalName="[known schema file]%(RecursiveDir)%(Filename)%(Extension)"
                      Link="Known Schemata/%(RecursiveDir)%(Filename)%(Extension)" />
  </ItemGroup>

  <ItemGroup>
    <!-- Each known protoc output file tree is stored in a marked sub-directory -->
    <EmbeddedResource Include="test-vectors/known-protoc-outputs/**/*.protoc-output/**/*"
                      LogicalName="[known protoc output][expected output folder]%(RecursiveDir)%(Filename)%(Extension)"
                      Link="Known Protoc Outputs/Expected Outputs/%(RecursiveDir)%(Filename)%(Extension)" />
    <!-- For each known protoc output file tree, there is either an input folder... -->
    <EmbeddedResource Include="test-vectors/known-protoc-outputs/**/*.protoc-input/**/*"
                      LogicalName="[known protoc output][input folder]%(RecursiveDir)%(Filename)%(Extension)"
                      Link="Known Protoc Outputs/Inputs/%(RecursiveDir)%(Filename)%(Extension)" />
    <!-- ... or a single input .proto file with matching name ... -->
    <EmbeddedResource Include="test-vectors/known-protoc-outputs/**/*.proto"
                      Exclude="test-vectors/known-protoc-outputs/**/*.protoc-input/**/*"
                      LogicalName="[known protoc output][input schema file]%(RecursiveDir)%(Filename)%(Extension)"
                      Link="Known Protoc Outputs/Inputs/%(RecursiveDir)%(Filename)%(Extension)" />
    <!-- ... or a known schema folder or schema file used as input (may be shared with other tests) -->
  </ItemGroup>

  <ItemGroup>
    <!-- Each known response to protoc is stored in a JSON-encoded file -->
    <EmbeddedResource Include="test-vectors/known-responses-to-protoc/**/*.response.pb.json"
                      LogicalName="[known response to protoc][expected response]%(RecursiveDir)%(Filename)%(Extension)"
                      Link="Known Protoc Responses/Expected Responses/%(RecursiveDir)%(Filename)%(Extension)" />
    <!-- For each known response to protoc, there is a request stored in a JSON-encoded file with matching name -->
    <EmbeddedResource Include="test-vectors/known-responses-to-protoc/**/*.request.pb.json"
                      LogicalName="[known response to protoc][request]%(RecursiveDir)%(Filename)%(Extension)"
                      Link="Known Protoc Responses/Requests/%(RecursiveDir)%(Filename)%(Extension)" />
  </ItemGroup>
</Project>

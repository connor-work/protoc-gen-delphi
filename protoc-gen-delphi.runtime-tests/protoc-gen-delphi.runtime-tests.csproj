<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <!-- TODO: Version should be always same as protoc-gen-delphi -->
    <CoreVersion>0.9.2</CoreVersion>
    <PrereleaseVersionSuffix></PrereleaseVersionSuffix>
    <SnapshotVersion>false</SnapshotVersion>
    <TargetFramework>net5.0</TargetFramework>
    <LangVersion>9.0</LangVersion>
    <RootNamespace>Work.Connor.Protobuf.Delphi.ProtocGenDelphi.RuntimeTests</RootNamespace>
    <IsPackable>true</IsPackable>
    <PackAsTool>true</PackAsTool>
    <ToolCommandName>protoc-gen-delphi-runtime-tests</ToolCommandName>
    <GenerateProgramFile>false</GenerateProgramFile>
    <StartupObject></StartupObject>
    <Nullable>enable</Nullable>
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
  </PropertyGroup>

  <!-- Pass StableVersion=true to mark this version as stable -->
  <!-- Pass LocalVersion=false to mark this version as a CI build -->
  <!-- Pass PrivateVersionOwner=my-org to mark this version as owned by "my-org" (inofficial CI) -->
  <PropertyGroup>
    <StableVersion>false</StableVersion>
    <LocalVersion>true</LocalVersion>
    <CoreVersion Condition=" '$(CoreVersion)' == '' ">0.0.1</CoreVersion>
    <SnapshotVersion Condition=" '$(SnapshotVersion)' == '' ">false</SnapshotVersion>
    <VersionDate>$([System.DateTime]::UtcNow.ToString(yyyyMMddHHmmss))</VersionDate>
  </PropertyGroup>

  <!-- Determine version stability -->
  <PropertyGroup Condition=" '$(SnapshotVersion)' == 'false' ">
    <VersionStability Condition=" '$(StableVersion)' == 'false' ">unstable</VersionStability>
    <VersionStability Condition=" '$(StableVersion)' == 'true' ">stable</VersionStability>
  </PropertyGroup>
  <PropertyGroup>
    <VersionStability Condition=" '$(SnapshotVersion)' == 'true' ">snapshot</VersionStability>
  <!-- Determine if this is a stable public version-->
    <IsStablePublicVersion Condition=" '$(LocalVersion)' == 'false'
                                   And '$(PrivateVersionOwner)' == ''
                                   And '$(VersionStability)' == 'stable' ">true</IsStablePublicVersion>
    <IsStablePublicVersion Condition=" '$(IsStablePublicVersion)' == '' ">false</IsStablePublicVersion>
  </PropertyGroup>
  <!-- Construct version tags-->
  <PropertyGroup Condition=" '$(LocalVersion)' == 'false' ">
    <ComputedVersionOwnerTag Condition=" '$(PrivateVersionOwner)' == '' ">00-public</ComputedVersionOwnerTag>
    <ComputedVersionOwnerTag Condition=" '$(PrivateVersionOwner)' != '' ">10-private.$(PrivateVersionOwner)</ComputedVersionOwnerTag>
  </PropertyGroup>
  <PropertyGroup>
    <ComputedVersionOwnerTag Condition=" '$(LocalVersion)' == 'true' ">20-local</ComputedVersionOwnerTag>
    <ComputedVersionStabilityTag Condition=" '$(VersionStability)' == 'snapshot' ">00-snapshot.$(VersionDate)</ComputedVersionStabilityTag>
    <ComputedVersionStabilityTag Condition=" '$(VersionStability)' == 'unstable' ">10-unstable.$(VersionDate)</ComputedVersionStabilityTag>
    <ComputedVersionStabilityTag Condition=" '$(VersionStability)' == 'stable' ">20-final</ComputedVersionStabilityTag>
  </PropertyGroup>
  <!-- Append version tags, except for stable public versions -->
  <PropertyGroup Condition=" '$(IsStablePublicVersion)' == 'false' ">
    <Version Condition=" '$(PrereleaseVersionSuffix)' != '' ">$(CoreVersion)-$(PrereleaseVersionSuffix).$(ComputedVersionOwnerTag).$(ComputedVersionStabilityTag)</Version>
    <Version Condition=" '$(PrereleaseVersionSuffix)' == '' ">$(CoreVersion)-zz-release.$(ComputedVersionOwnerTag).$(ComputedVersionStabilityTag)</Version>
  </PropertyGroup>
    <PropertyGroup Condition=" '$(IsStablePublicVersion)' == 'true' ">
    <Version Condition=" '$(PrereleaseVersionSuffix)' != '' ">$(CoreVersion)-$(PrereleaseVersionSuffix).official</Version>
    <Version Condition=" '$(PrereleaseVersionSuffix)' == '' ">$(CoreVersion)</Version>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="16.7.1" />
    <!-- Include test CLI to allow stand-alone execution, approach based on https://github.com/microsoft/vstest/issues/2200#issuecomment-590835049 -->
    <PackageReference Include="Microsoft.TestPlatform.CLI" Version="16.7.1" />
    <PackageReference Include="xunit" Version="2.4.1" />
    <PackageReference Include="xunit.runner.visualstudio" Version="2.4.3" />
    <PackageReference Include="coverlet.collector" Version="1.3.0" />
    <PackageReference Include="Work.Connor.Delphi.Tools" Version="0.5.0" />
    <!-- TODO: Should always be same version as referenced by protoc-gen-delphi -->
    <PackageReference Include="Work.Connor.Delphi.CodeWriter" Version="0.15.0" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\protoc-gen-delphi\protoc-gen-delphi.csproj" />
  </ItemGroup>

  <!-- Include published version of tested project for integration tests -->
  <!-- Solution based on https://github.com/dotnet/sdk/issues/1675#issuecomment-675590262 -->
  <PropertyGroup>
    <TestedExeSubDirectory>exe-protoc-gen-delphi</TestedExeSubDirectory>
    <LocalRuntimeIdentifier Condition="$([MSBuild]::IsOSPlatform('Linux'))">linux-x64</LocalRuntimeIdentifier>
    <LocalRuntimeIdentifier Condition="$([MSBuild]::IsOSPlatform('OSX'))">osx-x64</LocalRuntimeIdentifier>
    <LocalRuntimeIdentifier Condition="$([MSBuild]::IsOSPlatform('Windows'))">win-x64</LocalRuntimeIdentifier>
  </PropertyGroup>
  <Target Name="AddExeDependencyForBuild" BeforeTargets="CopyFilesToOutputDirectory">
    <MSBuild Projects="..\protoc-gen-delphi\protoc-gen-delphi.csproj"
             Targets="Publish"
             Properties="PublishDir=$([System.IO.Path]::GetFullPath($(OutDir)))/$(TestedExeSubDirectory);PublishReadyToRun=false;RuntimeIdentifier=$(LocalRuntimeIdentifier)"
             BuildInParallel="$(BuildInParallel)" />
  </Target>

  <ItemGroup>
    <!-- Runtime-independent support code for generated files -->
    <EmbeddedResource Include="../runtime/Work/Connor/Protobuf/Delphi/ProtocGenDelphi/*.pas"
                      LogicalName="[support code unit]%(Filename)%(Extension)"
                      Link="Support Code/%(Filename)%(Extension)" />
    <!-- Source code of runtime public API -->
    <EmbeddedResource Include="../runtime/Work/Connor/Protobuf/Delphi/ProtocGenDelphi/Runtime/*.pas"
                      LogicalName="[runtime public API unit]%(Filename)%(Extension)"
                      Link="Runtime API/Public/%(Filename)%(Extension)" />
    <!-- Source code of runtime internal API -->
    <EmbeddedResource Include="../runtime/Work/Connor/Protobuf/Delphi/ProtocGenDelphi/Runtime/Internal/*.pas"
                      LogicalName="[runtime internal API unit]%(Filename)%(Extension)"
                      Link="Runtime API/Internal/%(Filename)%(Extension)" />
    <!-- Source code of stub runtime library implementation -->
    <EmbeddedResource Include="../runtime/Work/Connor/Protobuf/Delphi/ProtocGenDelphi/StubRuntime/*.pas"
                      LogicalName="[stub runtime unit]%(Filename)%(Extension)"
                      Link="Stub Runtime/%(Filename)%(Extension)" />
    <!-- Support source code for Delphi tests -->
    <EmbeddedResource Include="test-support/**/*.pas"
                      LogicalName="[Delphi test support code unit]%(RecursiveDir)%(Filename)%(Extension)"
                      Link="Test Support Code/%(RecursiveDir)%(Filename)%(Extension)" />
    <EmbeddedResource Include="test-support/**/*.dpr"
                      LogicalName="[Delphi test support code program]%(RecursiveDir)%(Filename)%(Extension)"
                      Link="Test Support Code/%(RecursiveDir)%(Filename)%(Extension)" />
    <EmbeddedResource Include="test-support/**/*.inc"
                      LogicalName="[Delphi test support code include file]%(RecursiveDir)%(Filename)%(Extension)"
                      Link="Test Support Code/%(RecursiveDir)%(Filename)%(Extension)" />
  </ItemGroup>

  <ItemGroup>
    <!-- Known schema folders -->
    <EmbeddedResource Include="../test-vectors/known-schemata/**/*.protoc-input/**/*"
                      LogicalName="[known schema folder]%(RecursiveDir)%(Filename)%(Extension)"
                      Link="Known Schemata/%(RecursiveDir)%(Filename)%(Extension)" />
    <!-- Known schema files -->
    <EmbeddedResource Include="../test-vectors/known-schemata/**/*.proto"
                      Exclude="../test-vectors/known-schemata/**/*.protoc-input/**/*"
                      LogicalName="[known schema file]%(RecursiveDir)%(Filename)%(Extension)"
                      Link="Known Schemata/%(RecursiveDir)%(Filename)%(Extension)" />
  </ItemGroup>

  <ItemGroup>
    <!-- For each known message, there is a unit that constructs it -->
    <EmbeddedResource Include="test-vectors/known-messages/**/uConstruct.pas"
                      LogicalName="[known message][constructor unit]%(RecursiveDir)"
                      Link="Known Messages/%(RecursiveDir)%(Filename)%(Extension)" />
    <!-- For each known message, there is a unit that validates it -->
    <EmbeddedResource Include="test-vectors/known-messages/**/uValidate.pas"
                      LogicalName="[known message][validator unit]%(RecursiveDir)"
                      Link="Known Messages/%(RecursiveDir)%(Filename)%(Extension)" />
  </ItemGroup>
</Project>
